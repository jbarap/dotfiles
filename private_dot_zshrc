# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# --------
# Options
# --------

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

# environment variables
export MANPAGER="nvim +Man!"
export EDITOR="nvim"


# -------------
# Scripty stuff
# -------------

# cd with lf
lfcd () {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}

command_exists () {
    command -v $1 &> /dev/null
    return $?
}


# -------
# Keymaps
# -------

# vi maps in autocompletion
zstyle ':completion:*' menu select
zmodload zsh/complist

bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# ZVM configuration
function zvm_config() {
  ZVM_INIT_MODE=sourcing
  ZVM_LINE_INIT_MODE=$ZVM_MODE_INSERT
  ZVM_VI_INSERT_ESCAPE_BINDKEY=jk
}

# scripty maps
bindkey -s '^o' 'lfcd\n'
bindkey -s '^z' 'fg\n'  # allows for c-z to send to bg, then c-z again to bring it back


# -------
# Aliases
# -------

source ~/.aliases.zsh


# -----------
# Tools setup
# -----------

# starship
# if command_exists "starship"; then
#     eval "$(starship init zsh)"
# fi

# gcp cli
if [ -f "$HOME/tools/google-cloud-sdk/path.zsh.inc" ]; then
    . "$HOME/tools/google-cloud-sdk/path.zsh.inc"
fi
if [ -f "$HOME/tools/google-cloud-sdk/completion.zsh.inc" ]; then
    . "$HOME/tools/google-cloud-sdk/completion.zsh.inc"
fi

# ------------------------
# Zim module configuration
# ------------------------

# Append `../` to your input for each `.` you type after an initial `..`
zstyle ':zim:input' double-dot-expand yes

# zsh-autosuggestions

# Disable automatic widget re-binding on each precmd. This can be set when
# zsh-users/zsh-autosuggestions is the last module in your ~/.zimrc.
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

# bind [ctrl + space] to accep suggestions
# NOTE: must wrap it with zvm_after_init to avoid this mapping being overwritten
# by ZVM
zvm_after_init() {
    zle -N autosuggest-accept
    bindkey '^ ' autosuggest-accept
}


# -------------------------
# Zim module initialization
# -------------------------

ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim
# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  if (( ${+commands[curl]} )); then
    curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  else
    mkdir -p ${ZIM_HOME} && wget -nv -O ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  fi
fi
# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
# Initialize modules.
source ${ZIM_HOME}/init.zsh


# ----------------------------------
# Zim post-init module configuration
# ----------------------------------

# zsh-history-substring-search
zmodload -F zsh/terminfo +p:terminfo
# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
for key ('^[[A' '^P' ${terminfo[kcuu1]}) bindkey ${key} history-substring-search-up
for key ('^[[B' '^N' ${terminfo[kcud1]}) bindkey ${key} history-substring-search-down
for key ('k') bindkey -M vicmd ${key} history-substring-search-up
for key ('j') bindkey -M vicmd ${key} history-substring-search-down
unset key

# don't cd to a directory if the command doesn't exist
unsetopt AUTO_CD

# for conda autocompletion to work properly
# for some reason even though compinit should already be called
compinit

# zoxide setup
# NOTE: this has to be initialized after compinit is called
if command_exists "zoxide"; then
    eval "$(zoxide init zsh)"
fi

# change autocompletion group division style
zstyle ':completion:*' format '%F{green}-- %d --%f'


# >>> mamba initialize >>>
# !! Contents within this block are managed by 'mamba init' !!
export MAMBA_EXE="$HOME/.local/bin/micromamba";
export MAMBA_ROOT_PREFIX="$HOME/micromamba";
__mamba_setup="$("$MAMBA_EXE" shell hook --shell zsh --root-prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    alias micromamba="$MAMBA_EXE"  # Fallback on help from mamba activate
fi
unset __mamba_setup
# <<< mamba initialize <<<

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/bin/terraform terraform

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Set up fzf bindings
if command_exists "fzf"; then
    source <(fzf --zsh)
fi
